sequenceDiagram
    participant Main as main()
    participant Env as Environment/.env
    participant AWS as AWS Secrets Manager
    participant MC as MetricsClient
    participant KTA as KafkaTopicsAnalyzer
    participant Kafka as Kafka Cluster
    participant File as JSON Output File

    Main->>Env: load_dotenv()
    Main->>Env: Get configuration variables
    
    alt USE_AWS_SECRETS_MANAGER == "True"
        Main->>AWS: get_secrets(confluent_cloud_secrets)
        AWS-->>Main: API credentials or empty dict
        Main->>AWS: get_secrets(kafka_secrets)
        AWS-->>Main: Kafka credentials or empty dict
        alt Secrets retrieved successfully
            Note over Main: Use AWS secrets
        else Secrets empty
            Main->>Env: Fallback to environment variables
        end
    else
        Main->>Env: Use environment variables directly
    end

    alt use_sample_records == False
        rect rgb(173, 216, 230)
            Note over Main,MC: METRICS API ANALYSIS PATH
            Main->>MC: MetricsClient(metrics_config)
            Note over MC: Initialize Confluent Cloud API client
        end
    end

    Main->>KTA: KafkaTopicsAnalyzer(bootstrap_server, api_key, api_secret)
    
    Main->>KTA: analyze_all_topics(params)
    KTA->>Kafka: Connect to Kafka cluster
    KTA->>Kafka: List all topics
    Kafka-->>KTA: Topic list
    
    loop For each topic
        KTA->>Kafka: Get topic metadata (partitions)
        Kafka-->>KTA: Partition count
        
        alt use_sample_records == True
            rect rgb(144, 238, 144)
                Note over KTA,Kafka: SAMPLE RECORDS ANALYSIS PATH
                KTA->>Kafka: Sample records from topic
                Kafka-->>KTA: Sample data
                KTA->>KTA: Calculate avg_bytes_per_record
                KTA->>KTA: Calculate total_record_count
            end
        else
            rect rgb(173, 216, 230)
                Note over KTA: METRICS API PATH - Skip sampling
            end
        end
    end
    
    KTA-->>Main: Analysis results array

    alt results empty
        Main->>Main: Log error and return
    else
        loop For each result
            alt use_sample_records == True
                rect rgb(144, 238, 144)
                    Note over Main: SAMPLE RECORDS THROUGHPUT CALCULATION
                    Main->>Main: Calculate throughput from samples
                end
            else
                rect rgb(173, 216, 230)
                    Note over Main,MC: METRICS API THROUGHPUT CALCULATION
                    Main->>MC: get_topic_daily_aggregated_totals(RECEIVED_BYTES)
                    MC->>MC: Query Confluent Cloud Metrics API
                    MC-->>Main: Bytes throughput data
                    Main->>MC: get_topic_daily_aggregated_totals(RECEIVED_RECORDS)
                    MC->>MC: Query Confluent Cloud Metrics API  
                    MC-->>Main: Records count data
                end
            end
            Main->>Main: Calculate recommended partition count
        end

        Main->>Main: Sort results by topic name
        Main->>Main: Format and log analysis table
        Main->>Main: Calculate summary statistics
        Main->>Main: Log summary statistics
        
        Main->>File: Export results to JSON
        File-->>Main: File written successfully
        Main->>Main: Log completion message
    end